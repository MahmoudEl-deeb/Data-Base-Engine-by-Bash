#!/bin/bash

function tableExists() {
    read -p "Enter the name of the table you want to insert into: " tablename
    if [[ "$tablename" == $'\e' ]]; then
        echo "Exiting..."
        exit 0
    fi
    if [[ -f $1/$tablename ]]; then
        echo "Table exists."
    else
        echo "$tablename: No such table."
        while true; do
            read -p "Do you want to create a new table? (y/n): " ans
            if [[ "$ans" == $'\e' ]]; then
                echo "Exiting..."
                exit 0
            fi
            if [[ $ans == "y" || $ans == "Y" ]]; then
                ./createTable.sh
                return 0
            elif [[ $ans == "n" || $ans == "N" ]]; then
                cd ../
                return 0
            else
                echo "Invalid input: Please enter 'y' for yes or 'n' for no."
            fi
        done
    fi
}

function insertRow() {
    IFS=$'\n' read -d '' -r -a lines < "./AHMR_DATABASE_ENGINE/master/Metadata/$tablename.metadata"
    newRecord=""

    for i in "${!lines[@]}"; do
        IFS=':' read -r -a column <<< "${lines[i]}"
        colName=${column[0]}
        colDataType=${column[1]}
        colPK=${column[2]}

        validate_coltype() {
            numRegex='^[0-9]+$'
            strRegex='^[a-zA-Z]+$'

            if [[ $colDataType == "number" ]]; then
                while true; do
                    read -p "Enter $colName: " newColValue
                    if [[ "$newColValue" == $'\e' ]]; then
                        echo "Exiting..."
                        exit 0
                    fi
                    if [[ $newColValue =~ $numRegex ]]; then
                        break
                    else
                        echo "Invalid data type, please enter a number."
                    fi
                done
            elif [[ $colDataType == "string" ]]; then
                while true; do
                    read -p "Enter $colName: " newColValue
                    if [[ "$newColValue" == $'\e' ]]; then
                        echo "Exiting..."
                        exit 0
                    fi
                    if [[ $newColValue =~ $strRegex ]]; then
                        break
                    else
                        echo "Invalid data type, please enter a word."
                    fi
                done
            fi
        }


        if [[ $colPK == "yes" ]]; then
            IFS=$'\n' read -d '' -r -a dataLines < "$1/$tablename"
            for j in "${!dataLines[@]}"; do
                IFS=':' read -r -a record <<< "${dataLines[$j]}"
                if [[ ${record[i]} == $newColValue ]]; then
                    echo "ERROR: Primary key must be unique."
                    validate_coltype
                fi
            done
        fi

        if [[ $i == 0 ]]; then
            newRecord=$newColValue
        else
            newRecord="$newRecord:$newColValue"
        fi
    done

    echo $newRecord >> "$1/$tablename"
    echo "Record stored successfully."
}

