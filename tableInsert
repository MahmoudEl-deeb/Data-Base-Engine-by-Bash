#!/bin/bash

insert_table(){
    read -p "Enter the name of the table you want to insert into: " tablename
    path=$1
    if [[ "$tablename" == $'\e' ]]; then
        echo "Exiting..."
        exit 0
    fi

    if [[ -f "$path/$tablename" ]]; then
        echo "Table exists."
    else
        echo "$tablename: No such table."
        while true; do
            read -p "Do you want to create a new table? (y/n): " ans
            if [[ "$ans" == $'\e' ]]; then
                echo "Exiting..."
                exit 0
            fi
            if [[ "$ans" == "y" || "$ans" == "Y" ]]; then
               
                    create_table "$1"
            
                return 0
            elif [[ "$ans" == "n" || "$ans" == "N" ]]; then
                return 0
            else
                echo "Invalid input: Please enter 'y' for yes or 'n' for no."
            fi
        done
    fi

    # Read table metadata
    IFS=$'\n' read -d '' -r -a lines < "$path/Metadata/$tablename.metadata"
    newRecord=""

    for i in "${!lines[@]}"; do
        IFS=':' read -r -a column <<< "${lines[i]}"
        colName=${column[0]}
        colDataType=${column[1]}
        colPK=${column[2]}

        # Define regex patterns
        numRegex='^[0-9]+$'
        strRegex='^[a-zA-Z]+$'

        while true; do
            read -p "Enter $colName: " newColValue
            if [[ "$newColValue" == $'\e' ]]; then
                echo "Exiting..."
              	exit 0  
	    fi

            if [[ $colDataType == "number" && $newColValue =~ $numRegex ]]; then
                break
            elif [[ $colDataType == "string" && $newColValue =~ $strRegex ]]; then
                break
            else
                echo "Invalid data type, please enter a valid $colDataType."
            fi
        done

        # Check Primary Key uniqueness
        if [[ $colPK == "yes" ]]; then
            while grep -q "^$newColValue:" "$1/$tablename"; do
                echo "ERROR: Primary key must be unique."
                read -p "Enter a new value for $colName: " newColValue
            done
        fi

        # Construct the new record
        if [[ $path == 0 ]]; then
            newRecord=$newColValue
        else
            newRecord="$newRecord:$newColValue"
        fi
    done

    echo "$newRecord" >> "$path/$tablename"
    echo "Record stored successfully."
}

# Run the function with the correct database path


